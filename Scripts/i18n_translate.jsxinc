i18n.patternise = function (text) {
    text = i18n.denormalise(text);
    text = text.replaceAll('/', '\/');
    return '/'+text+'/';
}

i18n.trailingWhitespace = function(text) {
  var text = String(text);
  var trimmed = text.rtrim();
  return text.substring(trimmed.length);
}

i18n.loadTranslations = function (messagesFile) {
	try {
		log("i18n: Reading messages file", messagesFile);
		var messages = i18n.loadCSV(messagesFile);
		log("i18n: Read "+messages.length+" messages");

	  var messages2 = [];
	  for (var i = 0; i < messages.length; i++) {
	    messages[i]['Original'] = i18n.normalise(messages[i]['Original']);
	    messages[i]['Translation'] = i18n.normalise(messages[i]['Translation']);
	    messages[i]['Part of'] = i18n.normalise(messages[i]['Part of']);

	    if (messages[i]['Translation'] && messages[i]['Translation'].length > 0 && messages[i]['Translation'] !== '-') {
	      messages2.push(messages[i]);
	      if (messages[i]['Original'] == 'd00' && messages[i]['Translation'])
	        i18n.d00 = messages[i]['Translation'];
	    }
	  }
		log("i18n: Kept "+messages2.length+" messages");
	  i18n.messages = messages2;
  } catch (e) {
    log("i18n: Error loading translations", messagesFile);
  }
};

i18n.translate = function(message, partof) {
	try {
	  var message = i18n.normalise(message);
	  var partof = i18n.normalise(partof);
	  var d00 = false;
	  for (var i = 0; i < i18n.messages.length; i++) {
	    if (i18n.messages[i]['Original'] == message && i18n.messages[i]['Part of'] == partof) {
	      var translation = i18n.denormalise(i18n.messages[i]['Translation']);
	      if (translation.length > 0)
	        return translation;
	    }
	  }
	  // default
	  if (i18n.d00) {
	    var d = i18n.d00.replace('/00$/', '');
	    //log("i18n: Replacing dice");
	    var adjusted = message.replaceAll(/d([0-9])+/, d+'\1');
	    if (adjusted != message) 
	      return adjusted;
	  }
  } catch (e) {
    log("i18n: Error translating", message);
  }
  return false;
}



i18n.applyTranslationsFolder = function (srcFolder, dstFolder) {
	try {
		var files = srcFolder.getAllFiles();
		log("i18n: Translating "+i18n.messages.length+" strings in "+files.length+" files.");

		for ( var i = 0; i < files.length; i++ ) {
		  var srcFile = files[i];
		  var dstFile = new File(dstFolder.fullName+srcFile.fullName.substring(srcFolder.fullName.length));
		  i18n.applyTranslationsFile(srcFile, dstFile)
		}
  } catch (e) {
    log("i18n: Error in folder", srcFolder, { "Error": e.message } );
  }
};

i18n.applyTranslationsFile = function (srcFile, dstFile) {
  try {
    log("i18n: Translating file", srcFile, dstFile);
    dstFile.ensureParentFolder();

    var doc = app.open(srcFile);

    var frames = doc.textFrames;
    for ( var j = 0; j < frames.length; j++ ) {
      var frame = frames[j];
      var fullstr = frame.contents;
      var fulltranslation = i18n.translate(fullstr);
      if (fulltranslation) {
        frame.language = LanguageType.ITALIAN;
        frame.contents = fulltranslation;
        i18n.countTranslatedLines++;
        continue;
      }

      // split range based on continuous font, size and colour
      // always keep the splitting rules in sync with the other script!
      var fullrange = frame.textRange;
      var str = '';
      var ranges = frame.textRanges;
      var spanranges = [];
      var prev = false;
      for ( var k = 0; k < ranges.length; k++ ) {
        var range = ranges[k];
        if (prev == false || 
          (  isEqual(range.characterAttributes.fillColor, prev.characterAttributes.fillColor)
          && isEqual(range.characterAttributes.textFont, prev.characterAttributes.textFont)
          && isEqual(range.characterAttributes.size, prev.characterAttributes.size)
          )) {
          str = str+String(range.contents);
          spanranges.push(range);
        } else {
          var translation = i18n.translate(str, fullstr);
          if (translation) {
            //log('Translating span', str, translation);
            var span = spanranges[0];
            var trailing = i18n.trailingWhitespace(str);
            for (var l = 1; l < spanranges.length; l++) {
              spanranges[l].remove();
            }
            span.characters.addBefore(translation+trailing);
            span.characterAttributes.language = LanguageType.ITALIAN;
            span.contents = span.contents.substring(0, span.contents.length - 1);

            i18n.countTranslatedLines++;
          }
          str = String(range.contents);
          spanranges = [ range ];
        }
        prev = range;
      }
      if (str !== '') {
        var translation = i18n.translate(str, fullstr);
        if (translation) {
          var span = spanranges[0];
          var trailing = i18n.trailingWhitespace(str);
          for (var l = 1; l < spanranges.length; l++) {
            spanranges[l].remove();
          }
          span.characters.addBefore(translation+trailing);
          span.characterAttributes.language = LanguageType.ITALIAN;
          span.contents = span.contents.substring(0, span.contents.length - 1);

          i18n.countTranslatedLines++;
        }
      }
    }

    doc.saveAs(dstFile);
    doc.close();
    i18n.countTranslatedFiles++;
  } catch (e) {
    log("i18n: Error in file", srcFile, { "Error": e.message } );
  }
};
