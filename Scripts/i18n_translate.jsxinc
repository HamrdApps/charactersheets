i18n.esLanguages = {
  "Italian": LanguageType.ITALIAN,
  // "Spanish": LanguageType.SPANISH,
  // "Polish": LanguageType.POLISH,
  "German": LanguageType.STANDARDGERMAN,
  "French": LanguageType.STANDARDFRENCH,
  "Portuguese": LanguageType.STANDARDPORTUGUESE,
  "Russian": LanguageType.RUSSIAN,
  // "Dutch": LanguageType.DUTCH,
  "US English": LanguageType.ENGLISH
};

i18n.patternise = function (text) {
    text = i18n.denormalise(text);
    text = text.replaceAll('/', '\/');
    return '/'+text+'/';
}

i18n.trailingWhitespace = function(text) {
  var text = String(text);
  var trimmed = text.rtrim();
  return text.substring(trimmed.length);
}

i18n.loadTranslations = function (messagesFile) {
	try {
		log("i18n: Reading messages file", messagesFile);
		var messages = i18n.loadCSV(messagesFile);
		log("i18n: Read "+messages.length+" messages");

	  var messages2 = [];
	  for (var i = 0; i < messages.length; i++) {
	    messages[i]['Original'] = i18n.normalise(messages[i]['Original']);
	    messages[i]['Translation'] = i18n.normalise(messages[i]['Translation']);
	    messages[i]['Part of'] = i18n.normalise(messages[i]['Part of']);
      if (messages[i]['Original'] == messages[i]['Part of'] || typeof messages[i]['Part of'] !== 'string') {
        messages[i]['Part of'] = '';
      }

	    if (messages[i]['Translation'] && messages[i]['Translation'].length > 0 && messages[i]['Translation'] !== '-') {
	      messages2.push(messages[i]);
	      if (messages[i]['Original'] == 'd00' && messages[i]['Translation'])
	        i18n.d00 = messages[i]['Translation'];
	    }
	  }
		log("i18n: Kept "+messages2.length+" messages");
	  i18n.messages = messages2;
  } catch (e) {
    log("i18n: Error loading translations", messagesFile, { "Error": e.message } );
  }
};

i18n.translate = function(message, partof) {
	try {
	  var message = i18n.normalise(message);
	  var partof = i18n.normalise(partof);
    if (partof == message || typeof partof !== 'string') {
      partof = '';
    }
	  var d00 = false;
	  for (var i = 0; i < i18n.messages.length; i++) {
	    if (i18n.messages[i]['Original'] == message && i18n.messages[i]['Part of'] == partof) {
	      var translation = i18n.denormalise(i18n.messages[i]['Translation']);
	      if (translation.length > 0)
	        return translation;
	    }
	  }

	  // translate dice
	  if (i18n.d00) {
      var diceRe = /d([0-9]+)/;
      if (found = message.match(diceRe)) {
        log("Found a die:", found[1]);
        var number = parseint(found[1]);
        if (!isNaN(number)) {
          var translatedDie = i18n.d00.replace('/00$/', number);
          var translation = message.replaceAll(diceRe, translatedDie);
          log("i18n: Replacing dice", found[0], translation);
          if (translation != message)
            return translation;
        }
      } else if (message == "d") {
        var translation = i18n.d00.replace('/00$/', '');
        if (translation != message)
          return translation;
      }
	  }
  } catch (e) {
    log("i18n: Error translating", message, { "Error": e.message } );
  }
  return false;
}



i18n.applyTranslationsFolder = function (srcFolder, dstFolder) {
	try {
		var files = srcFolder.getAllFiles();
		log("i18n: Translating "+i18n.messages.length+" strings in "+files.length+" files.");

		for ( var i = 0; i < files.length; i++ ) {
		  var srcFile = files[i];
		  var dstFile = new File(dstFolder.fullName+srcFile.fullName.substring(srcFolder.fullName.length));
		  i18n.applyTranslationsFile(srcFile, dstFile)
		}
  } catch (e) {
    log("i18n: Error in folder", srcFolder, { "Error": e.message } );
  }
};

i18n.applyTranslationsFile = function (srcFile, dstFile) {
  try {
    log("i18n: Translating file", srcFile, dstFile);
    dstFile.ensureParentFolder();

    // i18n.tickThreshold = 30;
    var doc = app.open(srcFile);
    var baseURI = new Folder(baseFolder).absoluteURI+"/";
    var filePath = srcFile.absoluteURI.replace(baseURI, "");

    var countTranslatedFrames = 0;
    var frames = doc.textFrames;
    for ( var j = 0; j < frames.length; j++ ) {
      var frame = frames[j];
      var fullstr = frame.contents;
      log('Frame', fullstr);
      var replacement = i18n.getTranslationReplacement(fullstr, partOf, filePath);
      fullstr = replacement[0];
      var partOf = replacement[1];

      var fulltranslation = i18n.translate(fullstr, partOf);
      if (fulltranslation) {
        log('Translating full frame', fullstr, fulltranslation);
        frame.language = i18n.language; // LanguageType.ITALIAN;
        frame.contents = fulltranslation;
        i18n.countTranslatedLines++;
        countTranslatedFrames++;
        continue;
      }

      // split range based on continuous font, size and colour
      // always keep the splitting rules in sync with the other script!
      var fullrange = frame.textRange;
      var str = '';
      var ranges = frame.textRanges;
      var spanranges = [];
      var prev = false;
      for ( var k = 0; k < ranges.length; k++ ) {
        var range = ranges[k];
        if (prev == false || 
          (  isEqual(range.characterAttributes.fillColor, prev.characterAttributes.fillColor)
          && isEqual(range.characterAttributes.textFont, prev.characterAttributes.textFont)
          && isEqual(range.characterAttributes.size, prev.characterAttributes.size)
          )) {
          str = str+String(range.contents);
          spanranges.push(range);
        } else {
          var replacement = i18n.getTranslationReplacement(str, fullstr, filePath);
          str = replacement[0];
          var partOf = replacement[1];
          var translation = i18n.translate(str, partOf);
          if (translation) {
            log('Translating span', str, translation);
            var span = spanranges[0];
            var trailing = i18n.trailingWhitespace(str);
            for (var l = 1; l < spanranges.length; l++) {
              spanranges[l].remove();
            }
            span.characters.addBefore(translation+trailing);
            span.characterAttributes.language = LanguageType.ITALIAN;
            span.contents = span.contents.substring(0, span.contents.length - 1);

            i18n.countTranslatedLines++;
            countTranslatedFrames++;
          }
          str = String(range.contents);
          spanranges = [ range ];
        }
        prev = range;
      }
      if (str !== '') {
        var replacement = i18n.getTranslationReplacement(str, fullstr, filePath);
        str = replacement[0];
        var partOf = replacement[1];
        var translation = i18n.translate(str, partOf);
        if (translation) {
          log('Translating span', str, translation);
          var span = spanranges[0];
          var trailing = i18n.trailingWhitespace(str);
          for (var l = 1; l < spanranges.length; l++) {
            spanranges[l].remove();
          }
          span.characters.addBefore(translation+trailing);
          span.characterAttributes.language = LanguageType.ITALIAN;
          span.contents = span.contents.substring(0, span.contents.length - 1);

          i18n.countTranslatedLines++;
          countTranslatedFrames++;
        }
      }
    }

    if (countTranslatedFrames > 0) {
      doc.saveAs(dstFile);
      i18n.countTranslatedFiles++;
    }
    doc.close();
    i18n.tick();
  } catch (e) {
    log("i18n: Error in file", srcFile, { "Error": e.message } );
  }
};
