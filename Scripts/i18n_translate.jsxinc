i18n.esLanguages = {
  "Italian": LanguageType.ITALIAN,
  // "Spanish": LanguageType.SPANISH,
  // "Polish": LanguageType.POLISH,
  "German": LanguageType.STANDARDGERMAN,
  "French": LanguageType.STANDARDFRENCH,
  "Portuguese": LanguageType.STANDARDPORTUGUESE,
  "Russian": LanguageType.RUSSIAN,
  // "Dutch": LanguageType.DUTCH,
  "US English": LanguageType.ENGLISH
};

i18n.patternise = function (text) {
    text = i18n.denormalise(text);
    text = text.replaceAll('/', '\/');
    return '/'+text+'/';
};

i18n.trailingWhitespace = function(text) {
  var text = String(text);
  var trimmed = text.rtrim();
  return text.substring(trimmed.length);
};

i18n.loadTranslations = function (messagesFile) {
	try {
		log("i18n: Reading messages file", messagesFile);
		var messages = i18n.loadCSV(messagesFile);
		log("i18n: Read "+messages.length+" messages");

	  var messages2 = [];
	  for (var i = 0; i < messages.length; i++) {
	    messages[i]['Original'] = i18n.normalise(messages[i]['Original']);
	    messages[i]['Translation'] = i18n.normalise(messages[i]['Translation']);
	    messages[i]['Part of'] = i18n.normalise(messages[i]['Part of']);
      if (messages[i]['Original'] == messages[i]['Part of'] || typeof messages[i]['Part of'] !== 'string') {
        messages[i]['Part of'] = '';
      }

	    if (messages[i]['Translation'] && messages[i]['Translation'].length > 0 && messages[i]['Translation'] !== '-') {
	      messages2.push(messages[i]);
	      if (messages[i]['Original'] == 'd00' && messages[i]['Translation'])
	        i18n.d00 = messages[i]['Translation'];
	    }
	  }
		log("i18n: Kept "+messages2.length+" messages");
	  i18n.messages = messages2;
  } catch (e) {
    log("i18n: Error loading translations", messagesFile, { "Error": e.message } );
  }
};

i18n.translate = function(message, partof) {
	try {
	  var message = i18n.normalise(message);
	  var partof = i18n.normalise(partof);
    if (partof == message || typeof partof !== 'string') {
      partof = '';
    }
	  var d00 = false;
	  for (var i = 0; i < i18n.messages.length; i++) {
	    if (i18n.messages[i]['Original'] == message && i18n.messages[i]['Part of'] == partof) {
	      var translation = i18n.denormalise(i18n.messages[i]['Translation']);
	      if (translation.length > 0)
	        return translation;
	    }
	  }

	  // translate dice
	  if (i18n.d00) {
      var diceRe = /d([0-9]+)/;
      if (found = message.match(diceRe)) {
        log("Found a die:", found[1]);
        var number = parseint(found[1]);
        if (!isNaN(number)) {
          var translatedDie = i18n.d00.replace('/00$/', number);
          var translation = message.replaceAll(diceRe, translatedDie);
          log("i18n: Replacing dice", found[0], translation);
          if (translation != message)
            return translation;
        }
      } else if (message == "d") {
        var translation = i18n.d00.replace('/00$/', '');
        if (translation != message)
          return translation;
      }
	  }
  } catch (e) {
    log("i18n: Error translating", message, { "Error": e.message } );
  }
  return false;
}



i18n.applyTranslationsFolder = function (srcFolder, dstFolder) {
	try {
		var files = srcFolder.getAllFiles();
		log("i18n: Translating "+i18n.messages.length+" strings in "+files.length+" files.");

		for ( var i = 0; i < files.length; i++ ) {
		  var srcFile = files[i];
		  var dstFile = new File(dstFolder.fullName+srcFile.fullName.substring(srcFolder.fullName.length));
		  i18n.applyTranslationsFile(srcFile, dstFile)
		}
  } catch (e) {
    log("i18n: Error in folder", srcFolder, { "Error": e.message } );
  }
};

i18n.applyTranslationsFile = function (srcFile, dstFile) {
  try {
    log("i18n: Translating file", srcFile, dstFile);
    dstFile.ensureParentFolder();

    // i18n.tickThreshold = 30;
    var doc = app.open(srcFile);
    var baseURI = new Folder(baseFolder).absoluteURI+"/";
    var filePath = srcFile.absoluteURI.replace(baseURI, "");

    var countTranslatedFrames = 0;
    var frames = doc.textFrames;
    for ( var j = 0; j < frames.length; j++ ) {
      var frame = frames[j];
      if (i18n.translateFrame(frame, filePath))
        countTranslatedFrames++;
    }

    if (countTranslatedFrames > 0) {
      doc.saveAs(dstFile);
      i18n.countTranslatedFiles++;
    }
    doc.close();
    i18n.tick();
  } catch (e) {
    log("i18n: Error in file", srcFile, { "Error": e.message } );
  }
};

i18n.translateFrame = function (frame, filePath) {
  // var fullstr = frame.contents;
  // log('Translating frame', frame.contents);
  // var replacement = i18n.getTranslationReplacement(fullstr, partOf, filePath);
  // fullstr = replacement[0];
  // var partOf = replacement[1];

/*
  var fulltranslation = i18n.translate(fullstr, partOf);
  if (fulltranslation) {
    log('Translating full frame', fullstr, fulltranslation);
    frame.language = i18n.language; // LanguageType.ITALIAN;
    frame.contents = fulltranslation;
    i18n.countTranslatedLines++;
    countTranslatedFrames++;
    return true;
  }*/

  // split range based on continuous font, size and colour
  // always keep the splitting rules in sync with the other script!
  var spans = i18n.splitFrameIntoSpans(frame, filePath);
  // log('Found spans', spans.length);

  // find translations if possible
  var hasTranslation = false;
  for (var i = 0; i < spans.length; i++) {
    var span = spans[i];
    var translation = i18n.translate(span.str, span.partOf);
    if (translation) {
      // log('Found part translation', span.str, translation);
      hasTranslation = true;
      spans[i].translation = translation;
      spans[i].trailingWhitespace = i18n.trailingWhitespace(spans[i].str);
    }
  }
  if (!hasTranslation) {
    return; // bail early
  }

  // apply translation replacement, enforcing style
  var fulltext = '';
  for (var i = 0; i < spans.length; i++) {
    var span = spans[i];
    var text;
    if (span.translation) {
      span.text = span.translation + span.trailingWhitespace;
    } else {
      span.text = span.str;
    }

    fulltext += span.text;
    // TODO set range style
  }
  // log('Setting frame text', fulltext);
  frame.contents = fulltext;

  // reapply character attributes
  var c = 0;
  var spanNum = 0;
  var local = 0;
  for (var i = 0; i < frame.textRanges.length; i++) {
    if (local >= spans[spanNum].text.length) {
      spanNum++;
      local = 0;
    }
    if (spanNum >= spans.length) {
      break; // run out of spans
    }
    
    var span = spans[spanNum];
    var attr = span.characterAttributes;
    // log('Style range', frame.textRanges[i].contents, spanNum, span.attr);

    frame.textRanges[i].characterAttributes.fillColor = attr.fillColor;
    frame.textRanges[i].characterAttributes.textFont = attr.textFont;
    frame.textRanges[i].characterAttributes.size = attr.size;

    // next
    local += frame.textRanges[i].contents.length;
  }




  // var nranges = frame.textRanges.length;
  // for (var i = spans.length; i < nranges && i < frame.textRanges.length; i++) {
  //   frame.textRanges[i].remove();
  // }


/*
  // apply translation replacement, keeping track of index so far
  var offset = 0;
  for (var i = 0; i < spans.length; i++) {
    var span = spans[i];

    // local tools for walking through text ranges
    var rangeNumber = 0;
    var rangeCharOffset = 0;
    function walkCharacters(n) {
      log('walkCharacters', n);
      var walked = 0;
      while (walked < n) {
        if (rangeNumber >= frame.textRanges.length) {
          return; // reached the end of the frame, stop before we get an error
        }
        var range = frame.textRanges[rangeNumber];

        // if there are character left in the current range, account for them first
        var rlen = range.contents.length;
        var remainingChars = rlen - rangeCharOffset;
        if (remainingChars > 0) {
          var towalk = n - walked;
          if (remainingChars >= towalk) {
            rangeCharOffset += towalk;
            return; // found it!
          }
          walked += remainingChars;
        }

        // move to the next range
        rangeNumber++;
        rangeCharOffset = 0;
      }
    }
    function seekCharacter(ch) {
      log('seekCharacter', ch);
      // TODO!
    }
    function insertCharacters(str) {
      log('insertCharacters', str);
      var before = frame.textRanges[rangeNumber].contents.substring(0, rangeCharOffset);
      var after = frame.textRanges[rangeNumber].contents.substring(rangeCharOffset);
      log('Replacing range contents', frame.textRanges[rangeNumber].contents, before+str+after);
      frame.textRanges[rangeNumber].contents = before+str+after;
      rangeCharOffset += str.length;
    }
    function removeCharacters(n) {
      log('removeCharacters', n);
      var removed = 0;
      while (removed < n) {
        if (rangeNumber >= frame.textRanges.length) {
          return; // reached the end of the frame, stop before we get an error
        }
        var range = frame.textRanges[rangeNumber];

        // if there are character left in the current range, account for them first
        var rlen = range.contents.length;
        var before = range.contents.substring(0, rangeCharOffset);
        var remainingChars = rlen - rangeCharOffset;
        if (remainingChars > 0) {
          var toremove = n - removed;
          if (remainingChars >= toremove) {
            var after = range.contents.substring(rangeCharOffset+toremove);
            range.contents = before+after;
            rangeCharOffset += toremove;
            return; // that's enough
          }
          range.contents = before;
          removed += remainingChars;
        }

        // move to the next range
        rangeNumber++;
        rangeCharOffset = 0;
      }
    }

    if (span.offset) {
      offset += span.offset;
    }
    if (span.translation) {
      log('Applying translation', span.translation);

      // walk from the beginning until we've skipped the necessary number of characters and find the right range to insert into
      walkCharacters(offset);

      // now just to be sure, skip forward until we find the first character of the original string
      seekCharacter(spans[i].str[0]);

      // now we insert the replacement characters
      insertCharacters(span.translation + span.trailingWhitespace);

      // and remove enough characters to clear out 
      removeCharacters(span.str.length);

      offset += spans[i].translation.length + spans[i].trailingWhitespace.length;
    } else {
      offset += spans[i].str.length;
    }
  }*/


/*
  var replacementRangeText = [];
  for (var i = 0; i < frame.textRanges.length; i++)
    replacementRangeText[i] = '';
  var rangeIndex = 0;

  // for (var i = spans.length - 1; i >= 0; i--) {
  for (var i = 0; i < spans.length; i++) {
    var span = spans[i];
    log('Looking for translation for', span.str, span.partOf);

    var rangesToRemove = [];

    var translation = i18n.translate(span.str, span.partOf);
    if (translation) {
      log('Translating span', span.str, translation);
      log('Applying to ranges', span.ranges.length);
      for (var j = 0; j < span.ranges.length; j++) {
        log(' - ', span.ranges[j].contents);
      }

      var intoRange = span.ranges[0];
      log('Putting into range', intoRange.contents);
      var trailing = i18n.trailingWhitespace(span.str);
      log('Trailing space', trailing);
      for (var l = 1; l < span.ranges.length; l++) {
        log('Removing range', span.ranges[l].contents);
        rangesToRemove.push(span.ranges[l]);
        // span.ranges[l].remove();
        // span.ranges[l].contents = '';
      }
      replacementRangeText[rangeIndex] = translation+trailing;
      // intoRange.contents = translation+trailing;
      // intoRange.characters.addBefore(translation+trailing);
      // range.characterAttributes.language = LanguageType.ITALIAN;
      // intoRange.contents = intoRange.contents.substring(0, translation.length + trailing.length);
      // log('Range after replacement', span.ranges[0].contents);
    } else {
      replacementRangeText[rangeIndex] = span.str;
    }
    rangeIndex += span.ranges.length;
  }

    // for (var k = 0; k < rangesToRemove.length; k++) {
    //   log('Removing range', rangesToRemove[k].contents);
    //   rangesToRemove[k].remove();
    // }

  for (var i = 0; i < replacementRangeText.length; i++) {
    range = frame.textRanges[i];
    log('Replacing range', range.contents);
    log(' with ', replacementRangeText[i]);
    range.contents = replacementRangeText[i];
    log(' becomes ', frame.textRanges[i].contents);
  }*/

/*
  var spanranges = [];
  var prev = false;
  for ( var k = 0; k < ranges.length; k++ ) {
    var range = ranges[k];
    if (prev == false || 
      (  isEqual(range.characterAttributes.fillColor, prev.characterAttributes.fillColor)
      && isEqual(range.characterAttributes.textFont, prev.characterAttributes.textFont)
      && isEqual(range.characterAttributes.size, prev.characterAttributes.size)
      )) {
      str = str+String(range.contents);
      spanranges.push(range);
    } else {
      var replacement = i18n.getTranslationReplacement(str, fullstr, filePath);
      str = replacement[0];
      var partOf = replacement[1];


      log('Looking for translation for', str, partOf);
      var translation = i18n.translate(str, partOf);
      if (translation) {
        log('Translating span', str, translation);
        var span = spanranges[0];
        var trailing = i18n.trailingWhitespace(str);
        for (var l = 1; l < spanranges.length; l++) {
          spanranges[l].remove();
        }
        span.characters.addBefore(translation+trailing);
        span.characterAttributes.language = LanguageType.ITALIAN;
        span.contents = span.contents.substring(0, span.contents.length - 1);

        i18n.countTranslatedLines++;
        countTranslatedFrames++;
      }
      str = String(range.contents);
      spanranges = [ range ];
    }
    prev = range;
  }



  if (str !== '') {
    var replacement = i18n.getTranslationReplacement(str, fullstr, filePath);
    str = replacement[0];
    var partOf = replacement[1];
    log('Looking for final translation for', str, partOf);
    var translation = i18n.translate(str, partOf);
    if (translation) {
      log('Translating span', str, translation);
      var span = spanranges[0];
      var trailing = i18n.trailingWhitespace(str);
      for (var l = 1; l < spanranges.length; l++) {
        spanranges[l].remove();
      }
      span.characters.addBefore(translation+trailing);
      span.characterAttributes.language = LanguageType.ITALIAN;
      span.contents = span.contents.substring(0, span.contents.length - 1);

      i18n.countTranslatedLines++;
      return true;
    }
  }
  */
  return true;
};

i18n.splitFrameIntoSpans = function (frame, filePath) {
  var fullstr = frame.contents;
  var ranges = frame.textRanges;
  var spans = [];

  var str = '';
  var spanranges = [];
  var prev = false;
  for ( var k = 0; k < ranges.length; k++ ) {
    var range = ranges[k];
    if (prev == false || 
      (  isEqual(range.characterAttributes.fillColor, prev.characterAttributes.fillColor)
      && isEqual(range.characterAttributes.textFont, prev.characterAttributes.textFont)
      && isEqual(range.characterAttributes.size, prev.characterAttributes.size)
      )) {
      str = str+String(range.contents);
      spanranges.push(range);
    } else {
      var replacement = i18n.getTranslationReplacement(str, fullstr, filePath);
      spans.push({str: replacement[0], partOf: replacement[1], ranges: spanranges, characterAttributes: {
          fillColor: prev.characterAttributes.fillColor,
          textFont: prev.characterAttributes.textFont,
          size: prev.characterAttributes.size,
        }});

      str = String(range.contents);
      spanranges = [ range ];
    }
    prev = range;
  }

  if (str !== '') {
    var replacement = i18n.getTranslationReplacement(str, fullstr, filePath);
    spans.push({str: replacement[0], partOf: replacement[1], ranges: spanranges, characterAttributes: {
        fillColor: prev.characterAttributes.fillColor,
        textFont: prev.characterAttributes.textFont,
        size: prev.characterAttributes.size,
      }});
  }
  return spans;
}